# Generated by Django 2.2.24 on 2022-04-26 16:27

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('observations', '0120_populate_latest_observation_source_table'),
    ]

    operations = [
        migrations.RunSQL(
            sql="""
            CREATE OR REPLACE FUNCTION insert_latest_observation_source()
                RETURNS TRIGGER
                LANGUAGE plpgsql
            AS
            $$
            BEGIN
                if exists(SELECT * FROM observations_latestobservationsource WHERE source_id = new.source_id) THEN
                    IF new.recorded_at > (SELECT observations_latestobservationsource.recorded_at
                                          FROM observations_latestobservationsource
                                          WHERE source_id = new.source_id) THEN
                        UPDATE observations_latestobservationsource
                        SET observation_id=new.id,
                            recorded_at=new.recorded_at
                        where source_id = new.source_id;
                    END IF;
                ELSE
                    INSERT INTO observations_latestobservationsource(source_id, observation_id, recorded_at)
                    VALUES (new.source_id, new.id, new.recorded_at);
                END IF;
                RETURN New;
            END;
            $$;
            """,
            reverse_sql="DROP FUNCTION IF EXISTS insert_latest_observation_source();"
        ),
        migrations.RunSQL(
            sql="""
            CREATE OR REPLACE FUNCTION update_latest_observation_source()
                RETURNS TRIGGER
                LANGUAGE plpgsql
            AS
            $$
            BEGIN
                IF EXISTS(SELECT *
                          FROM observations_latestobservationsource
                          WHERE observations_latestobservationsource.source_id = new.source_id) THEN
                    IF new.recorded_at > (SELECT observations_latestobservationsource.recorded_at
                                          FROM observations_latestobservationsource
                                          WHERE observations_latestobservationsource.source_id = new.source_id) THEN
                        UPDATE observations_latestobservationsource
                        SET observation_id=NEW.id,
                            recorded_at=NEW.recorded_at,
                            source_id=NEW.source_id
                        WHERE observations_latestobservationsource.source_id = NEW.source_id;
                    END IF;
                END IF;
                RETURN New;
            END;
            $$;
                """,
            reverse_sql="DROP FUNCTION IF EXISTS update_latest_observation_source();"
        ),
        migrations.RunSQL(
            sql="""
            CREATE OR REPLACE FUNCTION delete_latest_observation_source()
                RETURNS TRIGGER
                LANGUAGE plpgsql
            AS
            $$
            DECLARE
                tmp_source      UUID;
                tmp_observation UUID;
                tmp_recorded_at TIMESTAMP;
            BEGIN
                IF not exists(SELECT *
                              FROM observations_latestobservationsource
                              WHERE observations_latestobservationsource.source_id = OLD.source_id) THEN
                    IF exists(SELECT *
                              FROM observations_observation
                              WHERE source_id = OLD.source_id
                              ORDER BY recorded_at DESC
                              LIMIT 1) THEN
                        SELECT source_id, id, recorded_at
                        INTO tmp_source, tmp_observation, tmp_recorded_at
                        FROM observations_observation
                        WHERE source_id = OLD.source_id
                        ORDER BY recorded_at DESC
                        LIMIT 1;
                        INSERT INTO observations_latestobservationsource(source_id, observation_id, recorded_at)
                        VALUES (tmp_source, tmp_observation, tmp_recorded_at);
                    END IF;
            
                END IF;
                RETURN NEW;
            END;
            $$;
            """,
            reverse_sql="DROP FUNCTION IF EXISTS delete_latest_observation_source();"
        ),
        migrations.RunSQL(
            sql="""
            CREATE TRIGGER trigger_insert_latest_observation_source
                AFTER INSERT
                ON observations_observation
                FOR EACH ROW
            EXECUTE PROCEDURE insert_latest_observation_source();
            """,
            reverse_sql="DROP TRIGGER IF EXISTS trigger_insert_latest_observation_source on observations_observation;"
        ),
        migrations.RunSQL(
            sql="""
            CREATE TRIGGER trigger_update_latest_observation_source
                AFTER UPDATE
                ON observations_observation
                FOR EACH ROW
            EXECUTE PROCEDURE update_latest_observation_source();
            """,
            reverse_sql="DROP TRIGGER IF EXISTS trigger_update_latest_observation_source on observations_observation;"
        ),
        migrations.RunSQL(
            sql="""
            CREATE TRIGGER trigger_delete_latest_observation_source
                AFTER DELETE
                ON observations_observation
                FOR EACH ROW
            EXECUTE PROCEDURE delete_latest_observation_source();
            """,
            reverse_sql="DROP TRIGGER IF EXISTS trigger_delete_latest_observation_source on observations_observation;"
        ),
    ]
