"""
Django settings for das project.

Generated by 'django-admin startproject' using Django 1.8.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

from corsheaders.defaults import default_headers

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
DOCS_ROOT = os.path.join(BASE_DIR, '../docs/_build/html')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'j(h&tc(u_#z-tf)u(9+3n39gmk92#6-v-he_p0ae+1rs*+2j@b'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
# running in development mode
DEV = False

# Application definition

INSTALLED_APPS = (
    'accounts.apps.AccountsConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    'versatileimagefield',
    'storages',
    'treebeard',
    'corsheaders',
    'oauth2_provider',
    'rest_framework',
    "rest_framework_gis",
    'rest_framework_swagger',
    'observations.apps.ObservationsConfig',
    'analyzers.apps.AnalyzersConfig',
    'das_server.apps.DasServerConfig',
    'tracking',
    'sensors.apps.SensorsConfig',
    'mapping.apps.MappingConfig',
    'activity.apps.ActivityConfig',
    'rt_api.apps.RTAPIConfig',
    'core.apps.CoreConfig',
    'vectronics',
    'choices',
    'reports.apps.ReportsConfig',
    'django_readonly_field',
    'usercontent.apps.UsercontentConfig',
    'django.contrib.postgres',
    'django.contrib.humanize',
    'django_extensions',
    'docs',
)

MIDDLEWARE = (
    'utils.middleware.RequestDataMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'corsheaders.middleware.CorsPostCsrfMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'oauth2_provider.middleware.OAuth2TokenMiddleware',
    'revision.middleware.RevisionMiddleware',
    'utils.middleware.RequestLoggingMiddleware',
    'utils.middleware.EULARedirectMiddleware',
    'utils.middleware.GeographicMiddleware'
    # 'django.contrib.sites.middleware.CurrentSiteMiddleware',
)

ROOT_URLCONF = 'das_server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR, 'das_server/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'accounts.context_processors.eula_context_processor',
            ],
        },
    },
    {
        'NAME': 'docx_template',
        'BACKEND': 'reports.backends.DocxBackend',
        'DIRS': ['/var/www/env_configs/', BASE_DIR, ],
        'APP_DIRS': True,
        'OPTIONS': {'environment': 'reports.environment.Environment',
                    'optimized': False},
    },
    {
        'BACKEND': 'django.template.backends.jinja2.Jinja2',
        'NAME': 'jinja2',
        'DIRS': [BASE_DIR, ],
        'APP_DIRS': True,
        'OPTIONS': {'environment': 'das_server.jinja2.environment'},
    },
]

AUTH_USER_MODEL = 'accounts.User'
LOGIN_URL = '/login'
LOGOUT_URL = '/logout'
LOGIN_REDIRECT_URL = '/'

# The number of days a password reset link is valid for (259200 secs are 3 days)
PASSWORD_RESET_TIMEOUT = 259200
WSGI_APPLICATION = 'das_server.wsgi.application'

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 9,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        # 'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'accounts.backends.NoLoginOAuth2Authentication',
        'utils.authentication.BearerTokenInUrlAuthentication',
        'utils.authentication.SuperUserSessionAuthentication',
    ),
    # 'VIEW_DESCRIPTION_FUNCTION': 'rest_framework_swagger.views.get_restructuredtext',
    'DEFAULT_RENDERER_CLASSES': (
        'utils.json.ExtendedJSONRenderer',
        'utils.json.ExtendedBrowsableAPIRenderer',
    ),
    'DEFAULT_METADATA_CLASS': 'utils.meta.NoMetaData',
    'EXCEPTION_HANDLER': 'utils.drf.api_exception_handler',
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
    # 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',
    # 'DEFAULT_VERSION': 'v1.0',
    'SECURITY_DEFINITIONS': {
        'oauth2': {
            'type': 'oauth2',
            'name': '',
            'authorizationUrl': 'http://swagger.io/api/oauth/dialog',
            'flow': 'password',
            'in': 'header',
        }
    },

    # Custom openapi autoschema
    'DEFAULT_SCHEMA_CLASS': 'das_server.views.CustomSchema',
    # Paginator overrides
    "OPTIONAL_PAGE_SIZE": 25,
    "MAX_PAGE_SIZE": 4000,
    "COUNT_TIMEOUT": 60*5
}

AUTHENTICATION_BACKENDS = (
    'accounts.backends.NoLoginOAuth2Backend',
    'accounts.backends.AccountsModelBackend',

)

SERIALIZATION_MODULES = {
    'geojson': 'core.serializers'
}

# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases
# we use postgis, create the db from the spatial db template
# createdb -T template_postgis das ENCODING 'utf8';
DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': 'das',
        'USER': 'das',
        'HOST': os.getenv('DB_HOST', 'postgis'),
        'PORT': os.getenv('DB_PORT', '5432'),
        'PASSWORD': 'password',
    },
}

DATABASE_ROUTERS = [
    'vectronics.db_routing.routers.PositionRouter',
    'vectronics.db_routing.routers.MigrationRouter'
]

# To enable or disable subject regions view on admin dashboard
SUBJECT_REGION_ENABLED = False

# Do not use Django logging config
LOGGING_CONFIG = None

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

USE_I18N = True
USE_L10N = True

USE_TZ = True
TIME_ZONE = 'UTC'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "www", "static")
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'activity'),
    os.path.join(BASE_DIR, 'observations'),
    os.path.join(BASE_DIR, 'mapping'),
    os.path.join(BASE_DIR, 'rt_api')
)

SITE_ID = 1
UI_SITE_NAME = 'EarthRanger'
UI_SITE_URL = 'http://www.earthranger.com'

# socket.io uses the CORS_ORIGIN_WHITELIST as well
# caveat is that socket.io matches against the whole ORIGIN ie:
# http://localhost
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_WHITELIST = (
)
CORS_REPLACE_HTTPS_REFERER = True
CORS_ALLOW_HEADERS = default_headers + (
    'user-profile',
)

ALLOWED_HOSTS = ['*']

SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
#CSRF_TRUSTED_ORIGINS = ('localhost',)


DATA_UPLOAD_MAX_NUMBER_FIELDS = 10000

SWAGGER_SETTINGS = {
    'api_version': 'v1.0',
    'api_path': '/',
    'enabled_methods': [
        'get',
        'post',
        'put',
        'patch',
        'delete'
    ],
    'doc_expansion': 'None',
    'exclude_namespaces': [],
    # 'is_authenticated': True,
    # 'is_superuser': True,
    'info': {
        'contact': 'guest@test.com',
        'description': 'EarthRanger Server',
        'license': '',
        'licenseUrl': '',
        'termsOfServiceUrl': '',
        'title': 'EarthRanger Server API',
    }
}

OAUTH2_PROVIDER = {'ACCESS_TOKEN_EXPIRE_SECONDS': 3600 * 48,    # two days
                   'REFRESH_TOKEN_EXPIRE_SECONDS': 31 * 24 * 3600,  # one month
                   }

# RT API settings
ASYNC_MODE = 'eventlet'

# override these if your libraries are in a different place
GEOS_LIBRARY_PATH = '/usr/local/lib/libgeos_c.so'
GDAL_LIBRARY_PATH = '/usr/lib/libgdal.so'

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}

RASTER_WORKDIR = '/tmp/raster'

'''
Associate a plugin name with a plugin-configuration dict that will override the plugin's configuration in the database.
'''
DATA_INPUT_PLUGINS = {
}

# would want to set this to where you might have some MBTiles maps
MAPPING = {'MBTILES': {'root': r'/tmp', }}

REALTIME_BROKER_URL = 'redis://redis:6379/2'
REALTIME_BROKER_OPTIONS = {'max_connections': 200}
PUBSUB_BROKER_URL = 'redis://redis:6379/1'
PUBSUB_BROKER_OPTIONS = {'max_connections': 200}

# Celery Settings
CELERY_BROKER_URL = 'redis://redis:6379'

CELERY_RESULT_BACKEND = CELERY_BROKER_URL
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_ENABLE_UTC = True
CELERY_TIMEZONE = 'UTC'

CELERY_REDIS_MAX_CONNECTIONS = 500
CELERY_WORKER_MAX_TASKS_PER_CHILD = 100

CELERY_RESULT_PERSISTENT = False
CELERY_RESULT_EXPIRES = 300
CELERY_TASK_IGNORE_RESULT = True
CELERY_TASK_STORE_ERRORS_EVEN_IF_IGNORED = True
# TODO: update in production
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
# Enables error emails.
CELERY_SEND_TASK_ERROR_EMAILS = False

CELERY_TASK_DEFAULT_QUEUE = 'default'
CELERY_TASK_DEFAULT_EXCHANGE = 'default'
CELERY_TASK_DEFAULT_ROUTING_KEY = 'default'

CELERY_BROKER_TRANSPORT_OPTIONS = {
    'visibility_timeout': 3600,
    'fanout_prefix': True
}

# task:
CELERY_TASK_TRACK_STARTED = True

# the address to send notification emails from
FROM_EMAIL = 'notifications@pamdas.org'
DEFAULT_FROM_EMAIL = 'notifications@pamdas.org'
# Used by password reset email
EMAIL_HOST_USER = 'info@pamdas.org'

SENDSMS_BACKEND = 'utils.smsbackend.AfricasTalkingBackend'
SENDSMS_FROM = None

# use these when you want to send SMS from kenya
SENDSMS_AFRICAS_TALKING_USERNAME = ''
SENDSMS_AFRICAS_TALKING_API_KEY = ''

# use these when you don't want to send SMS from kenya or when you want to
# use WhatsApp
TWILIO_ACCOUNT_SID = ''
TWILIO_AUTH_TOKEN = ''
WHATSAPP_FROM_NUMBER = ''

VERSATILEIMAGEFIELD_RENDITION_KEY_SETS = {
    'default': [
        ('original', 'url'),
        ('icon', 'crop__64x64'),  # Crop for use as icon
        ('thumbnail', 'thumbnail__150x150'),  # Resize to fit within
        ('large', 'thumbnail__800x800'),  # Resize to fit within
        ('xlarge', 'thumbnail__1920x1920')  # Resize to fit within
    ],
    'event_photo': [
        ('original', 'url'),
        ('thumbnail', 'thumbnail__150x150'),  # Resize to fit within
        ('large', 'thumbnail__800x800')  # Resize to fit within
    ],
}

VERSATILEIMAGEFIELD_SETTINGS = {
    # The amount of time, in seconds, that references to created images
    # should be stored in the cache. Defaults to `2592000` (30 days)
    'cache_length': 2592000,
    # The name of the cache you'd like `django-versatileimagefield` to use.
    # Defaults to 'versatileimagefield_cache'. If no cache exists with the name
    # provided, the 'default' cache will be used instead.
    'cache_name': 'versatileimagefield_cache',
    # The save quality of modified JPEG images. More info here:
    # http://pillow.readthedocs.org/en/latest/handbook/image-file-formats.html#jpeg
    # Defaults to 70
    'jpeg_resize_quality': 70,
    # The name of the top-level folder within storage classes to save all
    # sized images. Defaults to '__sized__'
    'sized_directory_name': 'sz',
    # The name of the directory to save all filtered images within.
    # Defaults to '__filtered__':
    'filtered_directory_name': 'fltr',
    # The name of the directory to save placeholder images within.
    # Defaults to '__placeholder__':
    'placeholder_directory_name': 'ph',
    # Whether or not to create new images on-the-fly. Set this to `False` for
    # speedy performance but don't forget to 'pre-warm' to ensure they're
    # created and available at the appropriate URL.
    'create_images_on_demand': True,
    # A dot-notated python path string to a function that processes sized
    # image keys. Typically used to md5-ify the 'image key' portion of the
    # filename, giving each a uniform length.
    # `django-versatileimagefield` ships with two post processors:
    # 1. 'versatileimagefield.processors.md5' Returns a full length (32 char)
    #    md5 hash of `image_key`.
    # 2. 'versatileimagefield.processors.md5_16' Returns the first 16 chars
    #    of the 32 character md5 hash of `image_key`.
    # By default, image_keys are unprocessed. To write your own processor,
    # just define a function (that can be imported from your project's
    # python path) that takes a single argument, `image_key` and returns
    # a string.
    'image_key_post_processor': None,
    # Whether to create progressive JPEGs. Read more about progressive JPEGs
    # here: https://optimus.io/support/progressive-jpeg/
    'progressive_jpeg': True
}

USERCONTENT_SETTINGS = {
    # For a file with one of these extensions, we'll attempt to save it as an
    # ImageFile.
    'imagefile_extensions': ('jpg', 'jpeg', 'png', 'gif', 'tif', 'tiff'),

    # Prohibit uploading files with these extensions.
    'prohibited_extensions': ('bin', 'exe', 'dll', 'deb', 'sh',),

    # Always serve files with these mime-types as application/octet-stream.
    'force_download_mimetypes': ('text/html', 'text/javascript',),

    # Edit these extensions by appending a .txt
    'edit_extensions': ('html', 'htm', 'js', 'css', 'exe', 'sh', 'bin', 'dll', 'deb', 'dmg', 'iso', 'img', 'msi', 'msp',
                        'msm')

}

SHOW_TRACK_DAYS = 16

REALTIME_AUTH_TIMEOUT_SECONDS = 1.0

NOTIFY_HIGH_PRIORITY_EVENT = None
NOTIFY_MEDIUM_PRIORITY_EVENT = None
NOTIFY_LOW_PRIORITY_EVENT = None

REPORTED_BY_PERMISSION_SET = 'b5057387-9f6c-4685-8ec1-46ad29684eea'

EVENT_MATRIX_ENABLED = False
EXPORT_KML_ENABLED = False
KML_FEED_TITLE = 'EarthRanger KML Service'
KML_OVERLAY_IMAGE = None
KML_TOKEN_TTL_DAYS = 5 * 365

SHOW_STATIONARY_SUBJECTS_ON_MAP = True

# Default speed-threshold (in km/h) by subject-subtype. These are default values that maybe overridden in an
# ObservationAnnotation instance.
# If a subject_sub-type is not found here, then the annotation routine
# will not do anything.
ANNOTATION_SETTINGS = {
    'speed_thresholds': {
        'forest_elephant': 7.0,
        'elephant': 7.5,
        'vehicle': 200.0,
        'plane': 500.0,
        'helicopter': 500.0,
        'ranger': 200.0,
        'ranger_team': 200.0,
    }
}

SENSORS = {
    'camera_trap': {
        'default_time_zone': 'UTC',
        'priority': 300,
    }
}

DEEP_LINK_EVENT_TYPES = [
    'low_speed_wilcoxon',
    'immobility',
    'low_speed_wilcoxon_all_clear',
    'low_speed_percentile',
    'low_speed_percentile_all_clear',
    'geofence_break',
    'immobility_all_clear',
    'proximity',
]

EUS_SETTINGS = {
    # 'zendesk' or 'email'
    'type': '',
    'name': '',
    'email': '',
    'organization': ''
}


def whitenoise_headers_func(headers, path, url):
    # This is intended for testing purposes, to add a header to assets that are served up by whitenoise.
    # We'll take it out but for now it will help us identify whether we're
    # using whitenoise properly.
    headers['x-er-source'] = 'wn'


WHITENOISE_ADD_HEADERS_FUNCTION = whitenoise_headers_func

DAILY_REPORT_ENABLED = False
ALERTS_ENABLED = True

CARTO_URL = 'https://wri-01.cartodb.com/api/v2/sql'  # For: VIIRS-Fire-Alerts

GFW_API_ROOT = 'https://production-api.globalforestwatch.org/v1'
GFW_WEB_ROOT = 'https://www.globalforestwatch.org'

GFW_CREDENTIALS = {
    'username': 'none',
    'password': 'none'
}
GFW_CLUSTER_RADIUS = 5  # kilometers
GFW_BACKFILL_INTERVAL_DAYS = 10  # run backfill every n days

METRICS_BUCKET = "er-site-metrics"

ACCEPT_EULA = True
PATROL_ENABLED = True

# Has to be a multiple of 256
GS_BLOB_CHUNK_SIZE = 10485760
UBI_API_URL = 'https://api.ubignss.com/position'
UBI_API_USERNAME = os.getenv('UBI_API_USERNAME', 'username')
UBI_API_PASSWORD = os.getenv('UBI_API_PASSWORD', 'password')


# Tableau Server:
TABLEAU_ENABLED = False
TABLEAU_SERVER = 'https://tableau.pamdas.org'
TABLEAU_VERSION = 3.9
TABLEAU_API_TOKEN = None
TABLEAU_API_USERNAME = "ER Server"
TABLEAU_API_PASSWORD = None
TABLEAU_DEFAULT_DASHBOARD = "er_standard_analytics/summary"

# Sensible default domain name.
SERVER_FQDN = "tempuri.org"

# Default to re-use the site's domain-name as a folder for daily-report template.
DAILY_REPORT_TEMPLATE_SUBFOLDER = SERVER_FQDN

TRACK_LENGTH = 21

PATROL_VIEW_REFRESH_HOURS = 1

INREACH_INBOUND_ENDPOINT = 'https://explore.garmin.com/IPCInbound/V1/Messaging.svc/Message'
INREACH_USERNAME = os.getenv('INREACH_USERNAME', 'username')
INREACH_PASSWORD = os.getenv('INREACH_PASSWORD', 'password')

GEO_PERMISSION_RADIUS_METERS = 3704
GEO_PERMISSION_SPEED_KM_H = 75
GEO_PERMISSION_VIOLATION_BAN_DURATION_MIN = 10

PERSISTENT_STORAGE = {
    "CLIENT": "utils.persistent.RedisStorage",
    "HOST": "redis",
    "PORT": "6379"
}
DISABLE_STATSD = True
