# Generated by Django 2.2.24 on 2022-06-30 17:57
from django.db import migrations

from activity.signals import ensure_geographic_perms_exists


def ensure_geographic_perms_exists(instance, apps):
    ContentType = apps.get_model("contenttypes", "ContentType")
    PermissionSet = apps.get_model("accounts", "PermissionSet")
    Permission = apps.get_model("auth", "Permission")

    content_type = ContentType.objects.get(app_label="activity", model="event")
    category_name = instance.value

    permission_set_name = f"View {instance.display} Event Geographic Permissions"
    permission_set, created = PermissionSet.objects.get_or_create(
        name=permission_set_name
    )

    for operation in ["add", "view", "change", "delete"]:
        codename = f"{operation}_{category_name}_geographic_distance"

        defaults = {
            "name": f"Can {operation} {category_name} reports in a certain distance",
            "content_type": content_type,
        }
        permission, created = Permission.objects.get_or_create(
            codename=codename, defaults=defaults
        )
        permission_set.permissions.add(permission)


def create_geo_perms_for_existing_categories(apps, schema_editor):
    EventCategory = apps.get_model("activity", "EventCategory")

    for category in EventCategory.objects.all():
        print(f"category: {category}")
        ensure_geographic_perms_exists(category, apps)


class Migration(migrations.Migration):
    dependencies = [
        ("activity", "0127_add_geographic_distance_permission_set"),
    ]

    operations = [
        migrations.RunPython(
            create_geo_perms_for_existing_categories,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
