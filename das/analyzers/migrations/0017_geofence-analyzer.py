# -*- coding: utf-8 -*-
# Generated by Django 1.9.12 on 2017-08-25 00:02
from __future__ import unicode_literals

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import revision.manager
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('mapping', '0011_spatial'),
        ('observations', '0041_camera'),
        ('analyzers', '0016_subjectanalyzerresult'),
    ]

    operations = [
        migrations.CreateModel(
            name='EnvironmentalSubjectAnalyzerConfig',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4,
                                        primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True,
                                          verbose_name='A friendly, unique name for the analyzer.')),
                ('notes', models.TextField(blank=True, default='')),
                ('schedule', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), default=[
                ], size=None, verbose_name='Array of crontab schedule patterns that an analyzer can use to determine whether to run.')),
                ('is_active', models.BooleanField(
                    default=True, help_text='Designates whether this analyzer is active. Set this False instead of deleting this record.', verbose_name='active')),
                ('search_time_hours', models.FloatField(
                    default=24.0, verbose_name='The period over which to run the subject analyzer')),
                ('threshold_value', models.FloatField(default=0.0)),
                ('scale_meters', models.FloatField(default=500.0)),
                ('GEE_img_name', models.CharField(default='', max_length=100)),
                ('GEE_img_band_name', models.CharField(
                    default='b1', max_length=50)),
                ('short_description', models.CharField(max_length=50)),
                ('subject_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                                    to='observations.SubjectGroup', verbose_name='This analyzer applies to subjects in this SubjectGroup.')),
            ],
            options={
                'abstract': False,
            },
            bases=(revision.manager.RevisionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='GeofenceAnalyzerConfig',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4,
                                        primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True,
                                          verbose_name='A friendly, unique name for the analyzer.')),
                ('notes', models.TextField(blank=True, default='')),
                ('schedule', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), default=[
                ], size=None, verbose_name='Array of crontab schedule patterns that an analyzer can use to determine whether to run.')),
                ('is_active', models.BooleanField(
                    default=True, help_text='Designates whether this analyzer is active. Set this False instead of deleting this record.', verbose_name='active')),
                ('search_time_hours', models.FloatField(
                    default=24.0, verbose_name='The period over which to run the subject analyzer')),
                ('threshold_time', models.IntegerField(default=18000)),
                ('containment_regions', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='containmentregions',
                                                          to='mapping.SpatialFeatureGroupStatic', verbose_name='This analyzer applies to containment polygons in this SpatialFeatureGroupStatic.')),
                ('geofences', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='geofences',
                                                to='mapping.SpatialFeatureGroupStatic', verbose_name='This analyzer applies to geofences in this SpatialFeatureGroupStatic.')),
                ('subject_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                                    to='observations.SubjectGroup', verbose_name='This analyzer applies to subjects in this SubjectGroup.')),
            ],
            options={
                'abstract': False,
            },
            bases=(revision.manager.RevisionMixin, models.Model),
        ),
        migrations.AddField(
            model_name='subjectanalyzerresult',
            name='title',
            field=models.TextField(blank=True, default=''),
        ),
        migrations.AlterField(
            model_name='immobilityanalyzerconfig',
            name='search_time_hours',
            field=models.FloatField(
                default=24.0, verbose_name='The period over which to run the subject analyzer'),
        ),
        migrations.AlterField(
            model_name='subjectanalyzerresult',
            name='analyzer_revision',
            field=models.IntegerField(default=1),
        ),
    ]
