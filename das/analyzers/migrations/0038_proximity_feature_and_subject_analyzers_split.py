# Generated by Django 2.2.9 on 2020-11-17 23:05

import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import revision.manager
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('mapping', '0034_update_arcgis_url'),
        ('observations', '0084_addax'),
        ('analyzers', '0037_gfw_download_status_fields'),
    ]

    operations = [
        migrations.RenameModel(
            old_name='ProximityAnalyzerConfig',
            new_name='FeatureProximityAnalyzerConfig',
        ),
        migrations.AlterModelOptions(
            name='featureproximityanalyzerconfig',
            options={'verbose_name': 'Feature Proximity Analyzer'},
        ),
        migrations.CreateModel(
            name='SubjectProximityAnalyzerConfig',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='A friendly, <b>unique</b> name for the analyzer.', max_length=100, unique=True, verbose_name='Analyzer Name')),
                ('notes', models.TextField(blank=True, default='')),
                ('schedule', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, null=True, size=None, verbose_name='Array of crontab schedule patterns that an analyzer can use to determine whether to run.')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this analyzer is active. Set this False instead of deleting this record.', verbose_name='active')),
                ('additional', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict)),
                ('threshold_time', models.IntegerField(default=86400)),
                ('threshold_dist_meters', models.FloatField(default=100.0, help_text="A proximity event will only occur when either subject's path passes within this distance of the other subject. A subject's path is drawn using a straight line between reported positions.", verbose_name='Proximity Distance (meters)')),
                ('analysis_search_time_hours', models.FloatField(default=1.0, help_text='Analysis will be performed on recent data within this time frame.', verbose_name='Analysis time frame (hours)')),
                ('proximity_time', models.FloatField(default=1.0, help_text="A proximity event will only occur when the two subject's position points occur within this time.", verbose_name='Proximity Time')),
                ('second_subject_group', models.ForeignKey(help_text='This analyzer applies to subjects in this Subject Group.', on_delete=django.db.models.deletion.CASCADE, related_name='subject_group_2', to='observations.SubjectGroup', verbose_name='Subject Group 2')),
                ('subject_group', models.ForeignKey(help_text='This analyzer applies to subjects in this Subject Group.', on_delete=django.db.models.deletion.CASCADE, related_name='subject_group_1', to='observations.SubjectGroup', verbose_name='Subject Group 1')),
            ],
            options={
                'verbose_name': 'Subject Proximity Analyzer',
            },
            bases=(revision.manager.RevisionMixin, models.Model),
        ),
    ]
